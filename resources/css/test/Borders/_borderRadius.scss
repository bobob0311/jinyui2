@import "../pseudo.scss";
@import "../breakpointtest.scss";

// Border radius values
$border-radii: (
  none: 0px,
  sm: 0.125rem,
  default: 0.25rem,
  md: 0.375rem,
  lg: 0.5rem,
  xl: 0.75rem,
  2xl: 1rem,
  3xl: 1.5rem,
  full: 9999px
);

// Directions for border radius
$directions: (
  s: (border-start-start-radius, border-end-start-radius),
  e: (border-start-end-radius, border-end-end-radius),
  t: (border-top-left-radius, border-top-right-radius),
  r: (border-top-right-radius, border-bottom-right-radius),
  b: (border-bottom-right-radius, border-bottom-left-radius),
  l: (border-top-left-radius, border-bottom-left-radius)
);

// Corners for border radius
$corners: (
  ss: border-start-start-radius,
  se: border-start-end-radius,
  ee: border-end-end-radius,
  es: border-end-start-radius,
  tl: border-top-left-radius,
  tr: border-top-right-radius,
  br: border-bottom-right-radius,
  bl: border-bottom-left-radius
);

// Generate border-radius classes
@each $key, $value in $border-radii {
  .rounded-#{$key} {
    border-radius: $value;
  }

  // Pseudo classes for border-radius
  @each $pseudo in map-keys($pseudos) {
    @include pseudo($pseudo, "rounded-#{$key}") {
      border-radius: $value;
    }
  }

  // Breakpoints and pseudo classes
  @each $breakpoint in map-keys($breakpoints) {
    @include breakpoint($breakpoint) {
      .#{$breakpoint}\:rounded-#{$key} {
        border-radius: $value;
      }

      @each $pseudo in map-keys($pseudos) {
        @include pseudo($pseudo, "#{$breakpoint}\:rounded-#{$key}") {
          border-radius: $value;
        }
      }
    }
  }
}

// Mixin to generate border radius classes for each direction
@mixin generate-border-radius-classes($prefix, $radius) {
  @each $direction, $properties in $directions {
    .rounded-#{$direction}-#{$prefix} {
      @each $property in $properties {
        #{$property}: $radius;
      }
    }
  }
}

// Generate classes for each border radius value and each direction
@each $key, $value in $border-radii {
  @include generate-border-radius-classes($key, $value);

  // Pseudo classes for directions
  @each $pseudo in map-keys($pseudos) {
    @include pseudo($pseudo, "rounded-#{$key}-s") {
      @include generate-border-radius-classes($key, $value);
    }
  }

  // Breakpoints and pseudo classes for directions
  @each $breakpoint in map-keys($breakpoints) {
    @include breakpoint($breakpoint) {
      .#{$breakpoint}\:rounded-#{$key}-s {
        @include generate-border-radius-classes($key, $value);
      }

      @each $pseudo in map-keys($pseudos) {
        @include pseudo($pseudo, "#{$breakpoint}\:rounded-#{$key}-s") {
          @include generate-border-radius-classes($key, $value);
        }
      }
    }
  }
}

// Mixin to generate border radius classes for each corner
@mixin generate-border-radius-corner-classes($prefix, $radius) {
  @each $corner, $property in $corners {
    .rounded-#{$corner}-#{$prefix} {
      #{$property}: $radius;
    }
  }
}

// Generate classes for each border radius value and each corner
@each $key, $value in $border-radii {
  @include generate-border-radius-corner-classes($key, $value);

  // Pseudo classes for corners
  @each $pseudo in map-keys($pseudos) {
    @include pseudo($pseudo, "rounded-#{$key}-ss") {
      @include generate-border-radius-corner-classes($key, $value);
    }
  }

  // Breakpoints and pseudo classes for corners
  @each $breakpoint in map-keys($breakpoints) {
    @include breakpoint($breakpoint) {
      .#{$breakpoint}\:rounded-#{$key}-ss {
        @include generate-border-radius-corner-classes($key, $value);
      }

      @each $pseudo in map-keys($pseudos) {
        @include pseudo($pseudo, "#{$breakpoint}\:rounded-#{$key}-ss") {
          @include generate-border-radius-corner-classes($key, $value);
        }
      }
    }
  }
}
