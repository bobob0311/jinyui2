@import "../pseudo.scss"; // Make sure to import your pseudo class mixin
@import "../breakpointtest.scss";

// Define border widths for y direction
$divide-y-widths: (
  0: 0px,
  2: 2px,
  4: 4px,
  8: 8px,
  default: 1px
);

// Generate divide-y classes
@each $key, $value in $divide-y-widths {
  @if $key == default {
    .divide-y {
      border-top-width: $value;
      border-bottom-width: 0;

      > * + * {
        border-top-width: $value;
        border-bottom-width: 0;
      }
    }
  } @else {
    .divide-y-#{$key} {
      border-top-width: $value;
      border-bottom-width: 0;

      > * + * {
        border-top-width: $value;
        border-bottom-width: 0;
      }
    }
  }

  // Pseudo classes for divide-y
  @each $pseudo in map-keys($pseudos) {
    @include pseudo($pseudo, "divide-y-#{$key}") {
      border-top-width: $value;
      border-bottom-width: 0;

      > * + * {
        border-top-width: $value;
        border-bottom-width: 0;
      }
    }
  }
}

// Generate reverse classes for divide-y
.divide-y-reverse {
  --tw-divide-y-reverse: 1;
  
  > * + * {
    border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));
    border-bottom-width: calc(1px * var(--tw-divide-y-reverse));
  }
}

// State-based classes for reverse
@each $pseudo in map-keys($pseudos) {
  @include pseudo($pseudo, "divide-y-reverse") {
    --tw-divide-y-reverse: 1;

    > * + * {
      border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));
      border-bottom-width: calc(1px * var(--tw-divide-y-reverse));
    }
  }
}

// Responsive classes for divide-y
@each $breakpoint in map-keys($breakpoints) {
  @include breakpoint($breakpoint) {
    @each $key, $value in $divide-y-widths {
      @if $key == default {
        .#{$breakpoint}\:divide-y {
          border-top-width: $value;
          border-bottom-width: 0;

          > * + * {
            border-top-width: $value;
            border-bottom-width: 0;
          }
        }
      } @else {
        .#{$breakpoint}\:divide-y-#{$key} {
          border-top-width: $value;
          border-bottom-width: 0;

          > * + * {
            border-top-width: $value;
            border-bottom-width: 0;
          }
        }
      }
      @each $breakpoint in map-keys($breakpoints) {
        @each $pseudo in map-keys($pseudos) {

      @include pseudo($pseudo, "#{$breakpoint}\:divide-y-#{$key}") {
        border-top-width: $value;
        border-bottom-width: 0;

        > * + * {
          border-top-width: $value;
          border-bottom-width: 0;
        }
      }}
    }
    }

    .#{$breakpoint}\:divide-y-reverse {
      --tw-divide-y-reverse: 1;

      > * + * {
        border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));
        border-bottom-width: calc(1px * var(--tw-divide-y-reverse));
      }
    }

    @each $pseudo in map-keys($pseudos) {
      @include pseudo($pseudo, "#{$breakpoint}\:divide-y-reverse") {
        --tw-divide-y-reverse: 1;

        > * + * {
          border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));
          border-bottom-width: calc(1px * var(--tw-divide-y-reverse));
        }
      }
    }
  }
}
