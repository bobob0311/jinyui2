@import "../pseudo.scss";
@import "../breakpointtest.scss";

*, :after, :before {
  box-sizing: border-box;
  border: 0 solid #e5e7eb;
}

// Border width values
$border-widths: (
  0: 0px,
  2: 2px,
  4: 4px,
  8: 8px,
  default: 1px
);

// Directions for border width
$directions: (
  x: (border-left-width, border-right-width),
  y: (border-top-width, border-bottom-width),
  s: border-inline-start-width,
  e: border-inline-end-width,
  t: border-top-width,
  r: border-right-width,
  b: border-bottom-width,
  l: border-left-width
);

// Default border width class
.border {
  border-width: map-get($border-widths, default);
}

// Generate border width classes for each direction and state
@each $key, $value in $border-widths {
  // Base border width classes
  .border-#{$key} {
    border-width: $value;
  }

  @each $direction, $properties in $directions {
    @if type-of($properties) == list {
      .border-#{$direction}-#{$key} {
        @each $property in $properties {
          #{$property}: $value;
        }
      }
    } @else {
      .border-#{$direction}-#{$key} {
        #{$properties}: $value;
      }
    }
  }

  // Pseudo classes for border width
  @each $pseudo in map-keys($pseudos) {
    @include pseudo($pseudo, "border-#{$key}") {
      border-width: $value;
    }

    @each $direction, $properties in $directions {
      @if type-of($properties) == list {
        @include pseudo($pseudo, "border-#{$direction}-#{$key}") {
          @each $property in $properties {
            #{$property}: $value;
          }
        }
      } @else {
        @include pseudo($pseudo, "border-#{$direction}-#{$key}") {
          #{$properties}: $value;
        }
      }
    }
  }
}

// Generate border width classes for each breakpoint
@each $breakpoint in map-keys($breakpoints) {
  @include breakpoint($breakpoint) {
    // Default border width class for each breakpoint
    .#{$breakpoint}\:border {
      border-width: map-get($border-widths, default);
    }

    @each $key, $value in $border-widths {
      .#{$breakpoint}\:border-#{$key} {
        border-width: $value;
      }

      @each $direction, $properties in $directions {
        @if type-of($properties) == list {
          .#{$breakpoint}\:border-#{$direction}-#{$key} {
            @each $property in $properties {
              #{$property}: $value;
            }
          }
        } @else {
          .#{$breakpoint}\:border-#{$direction}-#{$key} {
            #{$properties}: $value;
          }
        }
      }

      // Pseudo classes for each breakpoint
      @each $pseudo in map-keys($pseudos) {
        @include pseudo($pseudo, "#{$breakpoint}\:border-#{$key}") {
          border-width: $value;
        }

        @each $direction, $properties in $directions {
          @if type-of($properties) == list {
            @include pseudo($pseudo, "#{$breakpoint}\:border-#{$direction}-#{$key}") {
              @each $property in $properties {
                #{$property}: $value;
              }
            }
          } @else {
            @include pseudo($pseudo, "#{$breakpoint}\:border-#{$direction}-#{$key}") {
              #{$properties}: $value;
            }
          }
        }
      }
    }
  }
}
