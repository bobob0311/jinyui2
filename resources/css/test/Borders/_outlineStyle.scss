@import "../breakpointtest.scss";
@import "../pseudo.scss"; // Import your pseudo mixin

// Define outline widths
$outline-widths: (
  0: 0px,
  1: 1px,
  2: 2px,
  4: 4px,
  8: 8px
);

// Define outline styles
$outline-styles: (
  none: none,
  solid: solid,
  dashed: dashed,
  dotted: dotted,
  double: double
);

// Base outline class for setting the default style
.outline {
  outline-style: solid; // default outline style
}

// Generate outline width classes
@each $key, $value in $outline-widths {
  .outline-#{$key} {
    outline-width: $value;
  }

  // Generate state-based outline width classes
  @each $pseudo in map-keys($pseudos) {
    @include pseudo($pseudo, "outline-#{$key}") {
      outline-width: $value;
    }
  }

  // Generate responsive outline width classes
  @each $breakpoint in map-keys($breakpoints) {
    @include breakpoint($breakpoint) {
      .#{$breakpoint}\:outline-#{$key} {
        outline-width: $value;
      }

      // Responsive state-based outline width classes
      @each $pseudo in map-keys($pseudos) {
        @include pseudo($pseudo, "#{$breakpoint}\:outline-#{$key}") {
          outline-width: $value;
        }
      }
    }
  }
}

// Generate outline style classes
@each $style, $value in $outline-styles {
  .outline-#{$style} {
    outline-style: $value;
  }

  // Generate state-based outline style classes
  @each $pseudo in map-keys($pseudos) {
    @include pseudo($pseudo, "outline-#{$style}") {
      outline-style: $value;
    }
  }

  // Generate responsive outline style classes
  @each $breakpoint in map-keys($breakpoints) {
    @include breakpoint($breakpoint) {
      .#{$breakpoint}\:outline-#{$style} {
        outline-style: $value;
      }

      // Responsive state-based outline style classes
      @each $pseudo in map-keys($pseudos) {
        @include pseudo($pseudo, "#{$breakpoint}\:outline-#{$style}") {
          outline-style: $value;
        }
      }
    }
  }
}
